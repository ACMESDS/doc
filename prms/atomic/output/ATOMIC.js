Ext.data.JsonP.ATOMIC({"tagname":"class","name":"ATOMIC","autodetected":{},"files":[{"filename":"atomic.md","href":"atomic.md.html#ATOMIC"},{"filename":"atomic.js","href":"atomic.html#ATOMIC"}],"members":[{"name":"config","tagname":"cfg","owner":"ATOMIC","id":"cfg-config","meta":{}},{"name":"cores","tagname":"cfg","owner":"ATOMIC","id":"cfg-cores","meta":{}},{"name":"errors","tagname":"cfg","owner":"ATOMIC","id":"cfg-errors","meta":{"private":true}},{"name":"nextcore","tagname":"cfg","owner":"ATOMIC","id":"cfg-nextcore","meta":{"private":true}},{"name":"paths","tagname":"cfg","owner":"ATOMIC","id":"cfg-paths","meta":{"private":true}},{"name":"plugins","tagname":"cfg","owner":"ATOMIC","id":"cfg-plugins","meta":{}},{"name":"thread","tagname":"cfg","owner":"ATOMIC","id":"cfg-thread","meta":{"private":true}},{"name":"delete","tagname":"method","owner":"ATOMIC","id":"method-delete","meta":{}},{"name":"insert","tagname":"method","owner":"ATOMIC","id":"method-insert","meta":{}},{"name":"mixSQLs","tagname":"method","owner":"ATOMIC","id":"method-mixSQLs","meta":{}},{"name":"run","tagname":"method","owner":"ATOMIC","id":"method-run","meta":{}},{"name":"save","tagname":"method","owner":"ATOMIC","id":"method-save","meta":{}},{"name":"select","tagname":"method","owner":"ATOMIC","id":"method-select","meta":{}},{"name":"update","tagname":"method","owner":"ATOMIC","id":"method-update","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-ATOMIC","extends":null,"singleton":null,"private":null,"mixins":[],"requires":["child_processby","engineIF","enum","fs","vm"],"uses":[],"short_doc":"SourceForge\n    github\n    geointapps\n    gitlab\n\nATOMIC\n\nATOMIC provides cloud computing\non python, js, cv, matlab, ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Requires</h4><div class='dependency'>child_processby</div><div class='dependency'>engineIF</div><div class='dependency'>enum</div><div class='dependency'>fs</div><div class='dependency'>vm</div><h4>Files</h4><div class='dependency'><a href='source/atomic.md.html#ATOMIC' target='_blank'>atomic.md</a></div><div class='dependency'><a href='source/atomic.html#ATOMIC' target='_blank'>atomic.js</a></div></pre><div class='doc-contents'><p><a href=\"https://sourceforge.net\">SourceForge</a>\n    <a href=\"https://github.com/acmesds/atomic\">github</a>\n    <a href=\"https://git.geointapps.org/acmesds/atomic\">geointapps</a>\n    <a href=\"https://gitlab.west.nga.ic.gov/acmesds/atomic\">gitlab</a></p>\n\n<h1>ATOMIC</h1>\n\n<p>ATOMIC provides cloud computing\non <a href=\"https://totem.west.ile.nga.ic.gov/api.view\">python, js, cv, matlab, R, ... engines</a>\nvia the endpoints:</p>\n\n<pre><code>POST advance/step/insert a stateful engine\nPUT compile/init/update a stateful engine\nDELETE deallocate/kill/delete a stateful engine\nGET execute/read/select a stateless engines\n</code></pre>\n\n<p>Stateless engines are supported at the read (GET) endpoint, and are provided\nthe following parameters:</p>\n\n<pre><code>TAU.i = {tau} = input event sinked to an engine\nTAU.o = {tau} = output event sourced from an engine\nTAU.p = {sql: {...}, query: {...} }\n</code></pre>\n\n<p>where the query hash will contain the supplied url parameters.</p>\n\n<p>Stateful engines implement the step-init-kill (POST-PUT-DELETE) endpoints, and are\nsupplied event tokens (tau):</p>\n\n<pre><code>TAU.i = [{tau}, ...] = events arriving to engine's input port\nTAU.o = [{tau}, ...] = events departing from engine's output port\nTAU.p = {port1: {...}, ... port2: {...}, ... sql: {...} }\nTAU.port = engine's in/out port to step\nTAU.thread = engine's 0-base thread counter\n</code></pre>\n\n<p>where input/output ports and engine code are defined by\nthe <a href=\"https://totem.west.ile.nga.ic.gov/api.view\">engine context</a>.</p>\n\n<p>An event token typically contain the following default fields (they can\nbe freely interpretted and extended by the engine):</p>\n\n<pre><code>job = \"\"    = Current job thread N.N...\nwork = 0    = Anticipated/delivered data volume (dims bits etc)\ndisem = \"\"  = Disemination channel for this event\nclassif = \"\"    = Classification of this event\ncost = \"\"   = Billing center\npolicy = \"\" = Data retention policy\nstatus = 0  = Status code\nvalue = 0   = Flow calculation\n</code></pre>\n\n<h2>Installation</h2>\n\n<p>Clone <a href=\"https://github.com/acmesds/atomic\">ATOMIC cloud compute</a> into your PROJECT/atomic folder.<br/>\nClone <a href=\"https://github.com/acmesds/enum\">ENUM basic enumerators</a> into your PROJECT/enum folder.</p>\n\n<h3>Manage</h3>\n\n<pre><code>npm run [ edit || start ]           # Configure environment\nnpm test [ ? || A1 || A2 || ... ]       # Unit test\nnpm run [ prmprep || prmload ]      # Revise PRM\n</code></pre>\n\n<h2>Usage</h2>\n\n<p>Configure and use ATOMIC like this:</p>\n\n<pre><code>var ATOMIC = require(\"atomic\").config({\n        key: value,                         // set key\n        \"key.key\": value,                   // indexed set\n        \"key.key.\": value                   // indexed append\n    }, function (err) {\n    console.log( err ? \"something evil happended\" : \"Im running\");\n});\n</code></pre>\n\n<p>where <a href=\"https://totem.west.ile.nga.ic.gov/shares/prm/atomic/index.html\">its configuration keys</a> follow\nthe <a href=\"https://github.com/acmesds/enum\">ENUM deep copy conventions</a>.</p>\n\n<h3>A1 - Totem and Atomic Engine interfaces</h3>\n\n<pre><code>var ATOMIC = require(\"../atomic\");\nvar TOTEM = require(\"../totem\");\n\nTrace( \"A Totem+Engine client has been created\", {\n    a_tau_template: ATOMIC.tau(\"somejob.pdf\"),\n    engine_errors: ATOMIC.error,\n    get_endpts: TOTEM.reader,\n    my_paths: TOTEM.paths\n});\n</code></pre>\n\n<h3>A2 - Totem being powered up and down</h3>\n\n<pre><code>var TOTEM = require(\"../totem\");\n\nTOTEM.config({}, function (err) {\n    Trace( err || \"Started but I will now power down\" );\n    TOTEM.stop();\n});\n\nvar ATOMIC = require(\"../engine\").config({\n    thread: TOTEM.thread\n});\n</code></pre>\n\n<h3>A3 - Totem service with a chipper engine endpoint and a database</h3>\n\n<pre><code>var TOTEM = require(\"../totem\").config({\n    \"byType.\": {\n        chipper: function Chipper(req,res) {                \n            res( 123 );\n        }\n    },\n\n    mysql: {\n        host: ENV.MYSQL_HOST,\n        user: ENV.MYSQL_USER,\n        pass: ENV.MYSQL_PASS\n    }\n\n});\n\nvar ATOMIC = require(\"../engine\").config({\n    thread: TOTEM.thread\n});\n</code></pre>\n\n<h3>A4 - Totem with a complete engine test endpoint</h3>\n\n<pre><code>var TOTEM = require(\"../totem\").config({\n    \"byType.\": {\n        test: function Chipper(req,res) {\n\n            var itau = [ATOMIC.tau()];\n            var otau = [ATOMIC.tau()];\n\n            switch (req.query.config) {\n                case \"cv\": // program and step haar opencv machine \n                    parm =  {\n                        tau: [], \n                        ports: {\n                            frame:   {},\n                            helipads: {scale:0.05,dim:100,delta:0.1,hits:10,cascade:[\"c1/cascade\"]},\n                            faces:   {scale:0.05,dim:100,delta:0.1,hits:10,cascade:[\"haarcascade_frontalface_alt\",\"haarcascade_eye_tree_eyeglasses\"]}\n                    }};\n\n                    itau[0].job = \"test.jpg\";\n                    console.log(parm);\n\n                    for (var n=0,N=1;n&lt;N;n++)  // program N&gt;1 to test reprogram\n                        console.log(`INIT[${n}] = `, ATOMIC.opencv(\"opencv.Me.Thread1\",\"setup\",parm));\n\n                    for (var n=0,N=5;n&lt;N;n++) // step N&gt;1 to test multistep\n                        console.log(`STEP[${n}] = `, ATOMIC.opencv(\"opencv.Me.Thread1\",\"frame\",itau));\n\n                    // returns badStep if the cascades were undefined at the program step\n                    console.log(\"STEP = \", ATOMIC.opencv(\"opencv.Me.Thread1\",\"helipads\",otau));\n                    console.log(otau);\n                    break;\n\n                // python machines fail with \"cant find forkpty\" if \"import cv2\" attempted\n\n                case \"py1\": // program python machine\n                    parm =  { \n                        tau:    [{job:\"redefine on run\"}],\n                        ports: {    \n                    }};\n                    pgm = `\n                        print 'Look mom - Im running python!'\n                        print tau\n                        tau = [{'x':[11,12],'y':[21,22]}]\n                        `;\n\n                    // By default python attempts to connect to mysql.  \n                    // So, if mysql service not running or mysql.connector module not found, this will not run.\n                    console.log({py:pgm, ctx: parm});\n                    console.log(\"INIT = \", ATOMIC.python(\"py1.thread\",pgm,parm));\n                    console.log(parm.tau);\n                    break;\n\n                case \"py2\": // program and step python machine \n                    parm =  { \n                        tau:    [{job:\"redefine on run\"}],\n                        ports: {    \n                            frame:   {},\n                            helipads:{scale:1.01,dim:100,delta:0.1,hits:10,cascade:[\"c1/cascade\"]},\n                            faces:   {scale:1.01,dim:100,delta:0.1,hits:10,cascade:[\"haarcascade_frontalface_alt\",\"haarcascade_eye_tree_eyeglasses\"]}\n                    }};\n\n                    itau[0].job = \"test.jpg\";\n                    pgm = `\n                        print 'Look mom - Im running python!'\n                        def frame(tau,parms):\n                            print parms\n                            return -101\n                        def helipads(tau,parms):\n                            print parms\n                            return -102\n                        def faces(tau,parms):\n                            print parms\n                            return -103\n                        `;      \n                    console.log({py:pgm, ctx: parm});\n                    console.log(\"INIT = \", ATOMIC.python(\"py2.Me.Thread1\",pgm,parm));\n                    // reprogramming ignored\n                    //console.log(\"INIT = \", ATOMIC.python(\"py2.Me.Thread1\",pgm,parm));\n\n                    for (var n=0,N=1; n&lt;N; n++)\n                        console.log(`STEP[${n}] = `, ATOMIC.python(\"py2.Me.Thread1\",\"frame\",itau));\n\n                    console.log(\"STEP = \", ATOMIC.python(\"py2.Me.Thread1\",\"helipads\",otau));\n                    break;\n\n                case \"py3\": // program and step python machine string with reinit along the way\n                    parm =  { \n                        tau:    [{job:\"redefine on run\"}],\n                        ports: {    \n                            frame:   {},\n                            helipads:{scale:1.01,dim:100,delta:0.1,hits:10,cascade:[\"c1/cascade\"]},\n                            faces:   {scale:1.01,dim:100,delta:0.1,hits:10,cascade:[\"haarcascade_frontalface_alt\",\"haarcascade_eye_tree_eyeglasses\"]}\n                    }};\n\n                    itau[0].job = \"test.jpg\";\n                    pgm = `\n                        print 'Look mom - Im running python!'\n                        def frame(tau,parms):\n                            print parms\n                            return -101\n                        def helipads(tau,parms):\n                            print parms\n                            return -102\n                        def faces(tau,parms):\n                            print parms\n                            return -103\n                        `;\n\n                    console.log({py:pgm, ctx: parm});\n                    console.log(\"INIT = \", ATOMIC.python(\"py3\",pgm,parm));\n                    console.log(\"STEP = \", ATOMIC.python(\"py3\",\"frame\",itau));\n                    // reprogramming ignored\n                    //console.log(\"REINIT = \", ATOMIC.python(\"py3\",pgm,parm));\n                    //console.log(\"STEP = \", ATOMIC.python(\"py3\",\"frame\",itau));\n                    console.log(otau);\n                    break;\n\n                case \"js\": // program and step a js machine string\n                    parm =  { \n                        ports: {    \n                            frame:   {},\n                            helipads:{scale:1.01,dim:100,delta:0.1,hits:10,cascade:[\"c1/cascade\"]},\n                            faces:   {scale:1.01,dim:100,delta:0.1,hits:10,cascade:[\"haarcascade_frontalface_alt\",\"haarcascade_eye_tree_eyeglasses\"]}\n                    }};\n\n                    itau[0].job = \"test.jpg\";\n                    pgm = `\n                        CON.log('Look mom - Im running javascript!');\n                        function frame(tau,parms) { \n                            CON.log(\"here I come to save the day\");\n                            tau[0].xyz=123; \n                            return 0; \n                        }\n                        function helipads(tau,parms) { \n                            tau[0].results=666; \n                            return 101; \n                        }\n                        function faces(tau,parms) { return 102; }\n                        `;\n\n                    console.log({py:pgm, ctx: parm});\n                    console.log(\"INIT = \", ATOMIC.js(\"mytest\",pgm,parm));\n                    // frame should return a 0 = null noerror\n                    console.log(\"STEP = \", ATOMIC.js(\"mytest\",\"frame\",itau));\n                    console.log(itau);\n                    // helipads should return a 101 = badload error\n                    console.log(\"STEP = \", ATOMIC.js(\"mytest\",\"helipads\",otau));\n                    console.log(otau);\n                    break;  \n            }\n\n            res( \"thanks!\" );\n        }\n    },\n\n    mysql: {\n        host: ENV.MYSQL_HOST,\n        user: ENV.MYSQL_USER,\n        pass: ENV.MYSQL_PASS\n    }\n\n}, function (err) {\n    Trace( \"Unit test my engines with /test?config=cv | py1 | py2 | py3 | js\" );\n});\n\nvar ATOMIC = require(\"../atomic\").config({\n    thread: TOTEM.thread\n});\n</code></pre>\n\n<h2>Contributing</h2>\n\n<p>To contribute to this module, see our <a href=\"https://totem.west.ile.nga.ic.gov/issues.view\">issues</a>\nand <a href=\"https://totem.west.ile.nga.ic.gov/milestones.view\">milestones</a>.</p>\n\n<h2>License</h2>\n\n<p><a href=\"LICENSE\">MIT</a></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='cfg-config' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ATOMIC'>ATOMIC</span><br/><a href='source/atomic.html#ATOMIC-cfg-config' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ATOMIC-cfg-config' class='name expandable'>config</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'><p>Configure are start the engine interface, estblish worker core connections</p>\n</div><div class='long'><p>Configure are start the engine interface, estblish worker core connections</p>\n</div></div></div><div id='cfg-cores' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ATOMIC'>ATOMIC</span><br/><a href='source/atomic.html#ATOMIC-cfg-cores' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ATOMIC-cfg-cores' class='name expandable'>cores</a> : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Number of worker cores (aka threads) to provide in the cluster. ...</div><div class='long'><p>Number of worker cores (aka threads) to provide in the cluster.  0 cores provides only the master.</p>\n<p>Defaults to: <code>0</code></p></div></div></div><div id='cfg-errors' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ATOMIC'>ATOMIC</span><br/><a href='source/atomic.html#ATOMIC-cfg-errors' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ATOMIC-cfg-errors' class='name expandable'>errors</a> : Object<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'><p>Error messages</p>\n</div><div class='long'><p>Error messages</p>\n</div></div></div><div id='cfg-nextcore' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ATOMIC'>ATOMIC</span><br/><a href='source/atomic.html#ATOMIC-cfg-nextcore' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ATOMIC-cfg-nextcore' class='name expandable'>nextcore</a> : Number<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Next available core ...</div><div class='long'><p>Next available core</p>\n<p>Defaults to: <code>0</code></p></div></div></div><div id='cfg-paths' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ATOMIC'>ATOMIC</span><br/><a href='source/atomic.html#ATOMIC-cfg-paths' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ATOMIC-cfg-paths' class='name expandable'>paths</a> : Object<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Paths to various things. ...</div><div class='long'><p>Paths to various things.</p>\n<p>Defaults to: <code>{jobs: &quot;./jobs/&quot;}</code></p></div></div></div><div id='cfg-plugins' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ATOMIC'>ATOMIC</span><br/><a href='source/atomic.html#ATOMIC-cfg-plugins' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ATOMIC-cfg-plugins' class='name expandable'>plugins</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Modules to share accross all js-engines ...</div><div class='long'><p>Modules to share accross all js-engines</p>\n<p>Defaults to: <code>{}</code></p></div></div></div><div id='cfg-thread' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ATOMIC'>ATOMIC</span><br/><a href='source/atomic.html#ATOMIC-cfg-thread' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ATOMIC-cfg-thread' class='name expandable'>thread</a> : Function<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'><p>Start a sql thread</p>\n</div><div class='long'><p>Start a sql thread</p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-delete' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ATOMIC'>ATOMIC</span><br/><a href='source/atomic.html#ATOMIC-method-delete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ATOMIC-method-delete' class='name expandable'>delete</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>(kill)\nProvides engine CRUD interface: step/insert/POST, compile/update/PUT, run/select/GET, and\nfree/delete/DELETE. ...</div><div class='long'><p>(kill)\nProvides engine CRUD interface: step/insert/POST, compile/update/PUT, run/select/GET, and\nfree/delete/DELETE.</p>\n</div></div></div><div id='method-insert' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ATOMIC'>ATOMIC</span><br/><a href='source/atomic.html#ATOMIC-method-insert' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ATOMIC-method-insert' class='name expandable'>insert</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>(step)\nProvides engine CRUD interface: step/insert/POST, compile/update/PUT, run/select/GET, and\nfree/delete/DELETE. ...</div><div class='long'><p>(step)\nProvides engine CRUD interface: step/insert/POST, compile/update/PUT, run/select/GET, and\nfree/delete/DELETE.</p>\n</div></div></div><div id='method-mixSQLs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ATOMIC'>ATOMIC</span><br/><a href='source/atomic.html#ATOMIC-method-mixSQLs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ATOMIC-method-mixSQLs' class='name expandable'>mixSQLs</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Callback engine cb(ctx) with its state ctx primed with state from its ctx.Entry, then export its\nctx state specified ...</div><div class='long'><p>Callback engine cb(ctx) with its state ctx primed with state from its ctx.Entry, then export its\nctx state specified by its ctx.Exit.\nThe ctx.sqls = {var:\"query...\", ...} || \"query...\" enumerates the engine's ctx.Entry (to import\nstate into its ctx before the engine is run), and enumerates the engine's ctx.Exit (to export\nstate from its ctx after the engine is run).  If an sqls entry/exit exists, this will cause the\nctx.req = [var, ...] list to be built to synchronously import/export the state into/from the\nengine's context.</p>\n</div></div></div><div id='method-run' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ATOMIC'>ATOMIC</span><br/><a href='source/atomic.html#ATOMIC-method-run' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ATOMIC-method-run' class='name expandable'>run</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>The request req = { group, table, client, query, body, action, state }\n    If the engine's req.state is not provided,...</div><div class='long'><p>The request req = { group, table, client, query, body, action, state }\n    If the engine's req.state is not provided, then the engine is programmed; otherwise it is stepped.</p>\n\n<p>Allocate the supplied callback cb(core) with the engine core that is/was allocated to a Client.Engine.Type.Instance\nthread as defined by this request (in the req.body and req.log).  If a workflow Instance is\nprovided, then the engine is assumed to be in a workflow (thus the returned core will remain\non the same compile-step thread); otherwise, the engine is assumed to be standalone (thus forcing\nthe engine to re-compile each time it is stepped).</p>\n\n<p>As used here (and elsewhere) the terms \"process\", \"engine core\", \"safety core\", and \"worker\" are\nequivalent, and should not be confused with a physical \"cpu core\".  Because heavyweight\n(spawned) workers run in their own V8 instance, these workers can tollerate all faults (even\ncore-dump exceptions). The lightweight (cluster) workers used here, however, share the same V8\ninstance.  Heavyweight workers thus provide greater safety for bound executables (like opencv and\npython) at the expense of greater cpu overhead.</p>\n\n<p>The goal of hyperthreading is to balance threads across cpu cores.  The workerless (master only)\nconfiguration will intrinsically utilize only one of its underlying cpu cores (the OS remains,\nhowever, free to bounce between cpu cores via SMP).  A worker cluster, however, tends to\nbalance threads across all cpu cores, especially when the number of allocated workers exceeds\nthe number of physical cpu cores.</p>\n\n<p>Only the cluster master can see its workers; thus workers can not send work to other workers, only\nthe master can send work to workers.  Thus hyperthreading to <em>stateful</em> engines can be supported\nonly when master and workers are listening on different ports (workers are all listening on\nsame ports to provide <em>stateless</em> engines).  So typically place master on port N+1 (to server\nstateful engines) and its workers on port N (to serve stateless engines).</p>\n\n<p>This method will callback cb(core) with the requested engine core; null if the core could not\n be located or allocated.</p>\n</div></div></div><div id='method-save' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ATOMIC'>ATOMIC</span><br/><a href='source/atomic.html#ATOMIC-method-save' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ATOMIC-method-save' class='name expandable'>save</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Save tau job files. ...</div><div class='long'><p>Save tau job files.</p>\n</div></div></div><div id='method-select' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ATOMIC'>ATOMIC</span><br/><a href='source/atomic.html#ATOMIC-method-select' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ATOMIC-method-select' class='name expandable'>select</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>(read)\nProvides engine CRUD interface: step/insert/POST, compile/update/PUT, run/select/GET, and\nfree/delete/DELETE. ...</div><div class='long'><p>(read)\nProvides engine CRUD interface: step/insert/POST, compile/update/PUT, run/select/GET, and\nfree/delete/DELETE.</p>\n</div></div></div><div id='method-update' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ATOMIC'>ATOMIC</span><br/><a href='source/atomic.html#ATOMIC-method-update' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ATOMIC-method-update' class='name expandable'>update</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>(init)\nProvides engine CRUD interface: step/insert/POST, compile/update/PUT, run/select/GET, and\nfree/delete/DELETE. ...</div><div class='long'><p>(init)\nProvides engine CRUD interface: step/insert/POST, compile/update/PUT, run/select/GET, and\nfree/delete/DELETE.</p>\n</div></div></div></div></div></div></div>","meta":{}});